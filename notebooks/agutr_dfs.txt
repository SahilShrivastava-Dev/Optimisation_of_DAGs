
### Implementation Details

- **Graph Representation**: The graph is represented as a dictionary where each key is a node, and its value is a list of nodes it has edges to (successors).
- **Algorithm**: For each node `u` and each of its successors `v`, we perform a depth-first search (DFS) from `v` to find all nodes reachable from `v`. If another node `w` is reachable from `v` and there’s a direct edge from `u` to `w`, that edge is redundant and can be removed, since there’s an alternative path from `u` to `w` via `v`.
- **DFS**: An iterative DFS is used to avoid recursion limits, employing a stack to explore nodes and a set to track visited nodes, ensuring termination even in cyclic graphs.
- **Edge Removal**: Redundant edges are collected in a set and removed after exploration to avoid modifying the graph during traversal.

Here’s the complete Python code:

```python
def transitive_reduction(graph):
    """
    Compute the transitive reduction of a directed graph.
    
    Args:
        graph (dict): A dictionary representing a directed graph where keys are nodes
                      and values are lists of successor nodes.
    
    Returns:
        dict: A new dictionary representing the transitive reduction of the graph.
    """
    # Set to store edges to be removed
    to_remove = set()
    
    # Iterate over each node and its successors
    for u in graph:
        for v in graph[u]:
            # Find all nodes reachable from v
            reachable = DFS(graph, v)
            # Check each reachable node w
            for w in reachable:
                # If w is not v and there's a direct edge u -> w, mark it for removal
                if w != v and w in graph[u]:
                    to_remove.add((u, w))
    
    # Build the reduced graph by excluding edges marked for removal
    reduced_graph = {u: [w for w in graph[u] if (u, w) not in to_remove] for u in graph}
    return reduced_graph

def DFS(graph, start):
    """
    Perform an iterative depth-first search from a starting node.
    
    Args:
        graph (dict): The graph as a dictionary of nodes to successor lists.
        start: The starting node for DFS.
    
    Returns:
        set: A set of all nodes reachable from the start node.
    """
    visited = set()
    stack = [start]
    while stack:
        node = stack.pop()
        if node not in visited:
            visited.add(node)
            # Add unvisited neighbors to the stack
            for neighbor in graph[node]:
                if neighbor not in visited:
                    stack.append(neighbor)
    return visited

# Test the implementation
if __name__ == "__main__":
    # Example 1: Graph with a redundant edge
    graph1 = {
        'a': ['b', 'c'],  # a -> b, a -> c
        'b': ['c'],       # b -> c
        'c': []           # c has no outgoing edges
    }
    reduced1 = transitive_reduction(graph1)
    print("Graph 1 reduced:", reduced1)
    # Expected output: {'a': ['b'], 'b': ['c'], 'c': []}
    # Edge a -> c is removed because a -> b -> c exists

    # Example 2: Cyclic graph
    graph2 = {
        'a': ['b'],       # a -> b
        'b': ['c'],       # b -> c
        'c': ['a']        # c -> a
    }
    reduced2 = transitive_reduction(graph2)
    print("Graph 2 reduced:", reduced2)
    # Expected output: {'a': ['b'], 'b': ['c'], 'c': ['a']}
    # No edges are removed as the cycle has no redundant paths
```

### How It Works

1. **Graph Representation**:
   - `graph1` represents a graph where `a` points to `b` and `c`, and `b` points to `c`. The edge `a -> c` is redundant because there’s a path `a -> b -> c`.
   - `graph2` represents a cyclic graph forming a triangle `a -> b -> c -> a`, where no edges are redundant since removing any edge breaks the cycle’s reachability.

2. **DFS Function**:
   - Takes a graph and a starting node, returns a set of all reachable nodes.
   - Uses a stack for iteration and a `visited` set to handle cycles.

3. **Transitive Reduction**:
   - For each node `u` and successor `v`, DFS from `v` identifies reachable nodes.
   - If a node `w` is reachable from `v` (and `w != v`) and there’s a direct edge `u -> w`, that edge is added to `to_remove`.
   - A new graph is built by copying only the edges not in `to_remove`.

### Output Explanation

- **Graph 1**: The edge `a -> c` is removed, resulting in `{'a': ['b'], 'b': ['c'], 'c': []}`, since `c` is reachable from `a` via `b`.
- **Graph 2**: No edges are removed, so the output is the same as the input, `{'a': ['b'], 'b': ['c'], 'c': ['a']}`, reflecting that all edges are necessary to maintain the cycle.

### Time Complexity

- For each node `u` and each successor `v`, a DFS is performed, which is `O(n + m)` where `n` is the number of nodes and `m` is the number of edges.
- Total complexity is `O(n * m)` in the worst case, though this can vary depending on graph structure.

